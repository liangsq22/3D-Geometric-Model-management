/*************************************************************************
【文件名】                 Line3D.cpp
【功能模块和目的】          三维直线段类实现
【开发者及日期】            梁思奇 2024/8/2
【更改记录】               梁思奇 2024/8/2 完善类架构
*************************************************************************/

//自身类头文件
#include "Line3D.hpp"
//特定数量三维点基类所属头文件
#include "FixedElements3D.hpp"
//Point3D类所属头文件
#include "Point3D.hpp"
//std::invalid_argument、std::logic_error所属头文件
#include <stdexcept>
//std::string所属头文件
#include <string>

/*************************************************************************
【函数名称】        Line3D
【函数功能】        拷贝构造函数
【参数】            const Line3D& Source
【返回值】          无
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
Line3D::Line3D(const Line3D& Source) : FixedElements3D(Source){
}

/*************************************************************************
【函数名称】        Line3D
【函数功能】        带参构造函数，根据Point1和Point2初始化直线段
【参数】            const Point3D& Point1, const Point3D& Point2
【返回值】          无
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
Line3D::Line3D(const Point3D& Point1, const Point3D& Point2)
    : FixedElements3D(std::vector<Point3D>{Point1, Point2}, 2){
}

//Setter成员函数

//函数名：operator=
/*************************************************************************
【函数名称】        operator=
【函数功能】        赋值运算符
【参数】            const Line3D& Source
【返回值】          Line3D对象的引用
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
Line3D& Line3D::operator=(const Line3D& Source){
    //检查自赋值
    if (this != &Source) {
        //调用基类赋值运算符
        FixedElements3D::operator=(Source);
    }
    return *this;
}

/*************************************************************************
【函数名称】        SetPoints
【函数功能】        设置新的直线段端点
【参数】            const Point3D& Point1, const Point3D& Point2
【返回值】          无
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
void Line3D::SetPoints(const Point3D& Point1, const Point3D& Point2){
    //检查两点是否相同
    if (Point1 == Point2) {
        throw std::invalid_argument(
            "Cannot set both points to be the same");
    }
    //清空原有点集并添加新的两个点
    FixedElements3D::ClearAllPoints();
    FixedElements3D::AddPoint(Point1);
    FixedElements3D::AddPoint(Point2);
}

/*************************************************************************
【函数名称】        operator>>
【函数功能】        流提取运算符，从输入流中提取Line3D对象
【参数】            std::istream& Stream, Line3D& Line
【返回值】          std::istream&，提取后的流
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
std::istream& operator>>(std::istream& Stream, Line3D& Line1){
    Point3D Point1, Point2;
    //提取两个点（Point3D对象已经定义过流提取）
    Stream >> Point1 >> Point2;
    //设置直线段的两个端点
    Line1.SetPoints(Point1, Point2);
    return Stream;
}

//Getter成员函数

/*************************************************************************
【函数名称】        GetLength const
【函数功能】        求长度override
【参数】            无
【返回值】          double，长度值
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
double Line3D::GetLength() const{
    //向量的长度
    return (Points[0] - Points[1]).Length();
}

/*************************************************************************
【函数名称】        Area const
【函数功能】        求面积override
【参数】            无
【返回值】          double，面积值
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
double Line3D::GetArea() const{
    return 0.0;
}

/*************************************************************************
【函数名称】        GetPoints const
【函数功能】        获取直线段的两个端点
【参数】            无
【返回值】          std::pair<Point3D, Point3D>，两个端点
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
std::pair<Point3D, Point3D> Line3D::GetPoints() const{
    return std::make_pair(Points[0], Points[1]);
}

/*************************************************************************
【函数名称】        operator== const
【函数功能】        判断直线段是否与其他直线段相等
【参数】            const Line3D& Line1
【返回值】          bool，相等返回true，否则返回false
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
bool Line3D::operator==(const Line3D& Line1) const{
    return (Points[0] == Line1.Points[0] 
        && Points[1] == Line1.Points[1]) 
        || (Points[0] == Line1.Points[1] 
        && Points[1] == Line1.Points[0]);
}

/*************************************************************************
【函数名称】        operator!= const
【函数功能】        判断直线段是否与其他直线段不等
【参数】            const Line3D& Line1
【返回值】          bool，不等返回true，否则返回false
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
bool Line3D::operator!=(const Line3D& Line1) const{
    //调用==运算符
    return !(*this == Line1);
}

/*************************************************************************
【函数名称】        operator<<
【函数功能】        流插入运算符，将Line3D对象插入输出流中
【参数】            std::ostream& Stream, const Line3D& Line
【返回值】          std::ostream&，插入后的流
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
std::ostream& operator<<(std::ostream& Stream, const Line3D& Line1){
    //Point3D对象已经定义过流插入
    Stream << "[" << Line1.Points[0] << ", " << Line1.Points[1] << "]";
    return Stream;
}

//虚函数默认实现，用于派生类重写

/*************************************************************************
【函数名称】        SetColor
【函数功能】        设置直线段颜色，派生类可重写
                   基类中调用此函数将抛出异常
【参数】            const std::string& Color1
【返回值】          无
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
void Line3D::SetColor(const std::string& Color1){
    //抛出异常，表示此操作在基类中无效，只能对派生的现实直线段类进行操作
    throw std::logic_error(
        "SetColor is not applicable to Line3D base");
}

/*************************************************************************
【函数名称】        SetWidth
【函数功能】        设置直线段宽度，派生类可重写
                    基类中调用此函数将抛出异常
【参数】            double Width1
【返回值】          无
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
void Line3D::SetWidth(double Width1){
    //抛出异常，表示此操作在基类中无效，只能对派生的现实直线段类进行操作
    throw std::logic_error(
        "SetWidth is not applicable to Line3D base");
}

/*************************************************************************
【函数名称】        SetMaterial
【函数功能】        设置直线段材质，派生类可重写
                    基类中调用此函数将抛出异常
【参数】            const std::string& Material1
【返回值】          无
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
void Line3D::SetMaterial(const std::string& Material1){
    //抛出异常，表示此操作在基类中无效，只能对派生的现实直线段类进行操作
    throw std::logic_error(
        "SetMaterial is not applicable to Line3D base");
}

/*************************************************************************
【函数名称】        GetColor
【函数功能】        获取直线段颜色，默认返回"White"
【参数】            无
【返回值】          std::string，默认颜色"White"
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
std::string Line3D::GetColor() const{
    //非现实直线段类，默认颜色白色
    return "White";
}

/*************************************************************************
【函数名称】        GetWidth
【函数功能】        获取直线段粗细，默认返回0.0
【参数】            无
【返回值】          double，默认粗细0.0
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
double Line3D::GetWidth() const{
    //非现实直线段类，默认粗细0.0
    return 0.0;
}

/*************************************************************************
【函数名称】        GetMaterial
【函数功能】        获取直线段材质，默认返回"None"
【参数】            无
【返回值】          std::string，默认材质"None"
【开发者及日期】    梁思奇 2024/8/2
【更改记录】         
*************************************************************************/
std::string Line3D::GetMaterial() const{
    //非现实直线段类，默认材质为None
    return "None";
}
